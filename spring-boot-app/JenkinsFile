pipeline {
    agent {
        docker {
            image "abhishekf5/maven-abhishek-docker-agent:v1"
            args "-v /tmp/maven:/var/maven/.m2 -e MAVEN_CONFIG=/var/maven/.m2"
        }
    }

    environment {
        IMAGE_TAG = "${BUILD_NUMBER}"
    }

    stages {
        stage('Verification Repositories') {
            steps {
                script {
                    checkout(
                        scm: [
                            $class: 'GitSCM',
                            branches: [[name: '*/main']],
                            extensions: [],
                            userRemoteConfigs: [[url: 'https://github.com/Andherson333333/maven-test']]
                        ]
                    )
                }
            }
        }

        stage("Build") {
            steps {
                sh "cd spring-boot-app/ && mvn clean package"
            }
        }

        stage('Scan') {
            steps {
                withSonarQubeEnv('sonarqube') {
                    script {
                        def scannerHome = tool 'SonarScanner'
                        sh "cd spring-boot-app && mvn clean verify sonar:sonar -Dsonar.projectKey=maven-jenkins"
                    }
                }
            }
        }

        stage("Quality Gate") {
            steps {
                timeout(time: 2, unit: 'MINUTES') {
                    script {
                        def qualityGate = waitForQualityGate abortPipeline: true
                        if (qualityGate.status == 'OK') {
                            echo "El control de calidad ha sido aprobado. Continuando con el pipeline."
                        } else {
                            echo "El control de calidad ha fallado. Deteniendo el pipeline."
                            currentBuild.result = 'FAILURE'
                        }
                    }
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    // Establece la variable HOME para ajustar permisos y evitar problemas de escritura
                    def homeDir = "${env.WORKSPACE}"
                    sh """
                    cd spring-boot-app && HOME=${homeDir} docker build -t andherson1039/maven:${BUILD_NUMBER} .
                    """
                }
            }
        }

        stage('Login to Docker Hub and Push') {
            steps {
                script {
                    withCredentials([string(credentialsId: 'dockerhubpwd', variable: 'dockerhubpwd')]) {
                        // Establece la variable HOME para ajustar permisos
                        def homeDir = "${env.WORKSPACE}"
                        sh """
                        HOME=${homeDir} docker login -u andherson1039 -p ${dockerhubpwd}
                        HOME=${homeDir} docker push andherson1039/maven:${BUILD_NUMBER}
                        """
                    }
                }
            }
        }

        stage('Update Deployment in ArgoCD') {
            steps {
                withCredentials([gitUsernamePassword(credentialsId: 'gitlhublogin', gitToolName: 'Default')]) {
                    script {
                        // Establece la variable HOME para ajustar permisos
                        def homeDir = "${env.WORKSPACE}"
                        sh """
                        cat argocd/deployment.yaml
                        sed -i "s|image: andherson1039/maven:[0-9]\\+|image: andherson1039/maven:${BUILD_NUMBER}|g" argocd/deployment.yaml
                        cat argocd/deployment.yaml
                        HOME=${homeDir} git config --global user.email \"jenkins@jenkins.com\"
                        HOME=${homeDir} git config --global user.name \"Jenkins\"
                        HOME=${homeDir} git add argocd/deployment.yaml
                        HOME=${homeDir} git commit -m 'Updated the deployment.yaml | Jenkins Pipeline'
                        HOME=${homeDir} git remote -v
                        HOME=${homeDir} git push https://github.com/Andherson333333/maven-test.git HEAD:main
                        """
                    }
                }
            }
        }
    }

    post {
        always {
            sh 'docker logout'
        }
    }
}


